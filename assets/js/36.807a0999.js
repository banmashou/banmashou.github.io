(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{512:function(e,n,t){"use strict";t.r(n);var o=t(13),r=Object(o.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"typescript"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#typescript"}},[e._v("#")]),e._v(" TypeScript")]),e._v(" "),n("p",[e._v("下面是对路由的meta属性进行类型声明，这样就可以在组件中拥有类型提示了。")]),e._v(" "),n("p",[e._v("创建 "),n("code",[e._v("src/router.d.ts")]),e._v(" 声明文件，内容如下")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import 'vue-router'\n\ndeclare module 'vue-router' {\n  interface RouteMeta {\n    // 是可选的\n    isAdmin?: boolean\n    // 每个路由都必须声明\n    requiresAuth: boolean\n  }\n}\n")])])]),n("h2",{attrs:{id:"自动加载"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#自动加载"}},[e._v("#")]),e._v(" 自动加载")]),e._v(" "),n("p",[e._v("每次单独配置路由比较麻烦，我们可以将路由自动化加载配置。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("//路由配置\nconst routes = []\n//所有布局组件\nconst layouts = import.meta.globEager('../layouts/*.vue')\n//所有页面组件\nconst views = import.meta.globEager('../views/**/*.vue')\n\n//布局组件路由定义\nObject.entries(layouts).forEach(([file, component]) => {\n    //布局路由路径\n    const path = file.split('/').pop().slice(0, -4)\n    const route = {\n        path: `/${path}`,\n        component: component.default,\n        children: [],\n    }\n    routes.push(route)\n})\n\n//页面组件\b路由定义\nObject.entries(views).forEach(([file, component]) => {\n    //视图路由\n    const route = viewRoute(file, component.default)\n\n    //视图路由添加到路由配置\n    const group = viewGroup(file)\n    group ? group.children.push(route) : routes.push(route)\n})\n\n//视图组件链接地址\nfunction viewRoute(file, component) {\n    const route = { path: '', component, route: component.route || {} }\n\n    //页面自定义的路由\n    if (route.route.path) {\n        route.path = route.route.path\n        return route\n    }\n\n    //跟据页面地址自动声明路由\n    if (viewGroup(file)) {\n        route.path = file.split('/').splice(3).join('/').slice(0, -4)\n    } else {\n        route.path = '/' + file.split('/').splice(2).join('/').slice(0, -4)\n    }\n\n    return route\n}\n\n//视图所在布局组件\nfunction viewGroup(file) {\n    return routes.find(group => group.children && file.includes(`views${group.path}/`))\n}\n\nexport default routes\n")])])]),n("p",[e._v("项目目录结构如下")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("src\n├── layouts\n│   └── admin.vue\n├── router\n│   ├── index.js\n│   └── routes.js\n└── views\n    ├── admin\n    │   └── home.vue\n    └── index.vue\n")])])])])}),[],!1,null,null,null);n.default=r.exports}}]);